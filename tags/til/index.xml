<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>til on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/til/</link>
    <description>Recent content in til on Nicola Iarocci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Fri, 12 Mar 2021 07:05:25 +0100</lastBuildDate>
    
	<atom:link href="https://nicolaiarocci.com/tags/til/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Shrink a WSL2 Virtual Disk</title>
      <link>https://nicolaiarocci.com/how-to-shrink-a-wsl2-virtual-disk/</link>
      <pubDate>Fri, 12 Mar 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/how-to-shrink-a-wsl2-virtual-disk/</guid>
      <description>I discovered you can use the &amp;ldquo;diskpart&amp;rdquo; tool to compact a VHDX. This allows you to shrink a WSL2 virtual disk file, reclaiming disk space. It appeared to work for me without any data corruption, taking the file size down from 100GB to 15GB. (source)
 I adore Parallels &amp;ldquo;reclaim disk space&amp;rdquo; feature. Just the other day, I got back 70GB off my Windows Guest in a breeze. I&amp;rsquo;m coming from VirtualBox, where reclaiming disk space is a significant pain.</description>
    </item>
    
    <item>
      <title>Cleaning Up Your Postgres Database</title>
      <link>https://nicolaiarocci.com/cleaning-up-your-postgres-database/</link>
      <pubDate>Tue, 09 Mar 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/cleaning-up-your-postgres-database/</guid>
      <description>I am an application/backend developer who has to quibble with databases more often than desired. I can get my way around Postgres pretty well, but I can always use a hint or two, especially when it comes to fine-tuning and performance.
I stumbled upon Cleaning Up Your Postgres Databases. It offers useful advice on spotting performance bottlenecks in your Postgres database. Take the cache and index hit queries, for example.</description>
    </item>
    
    <item>
      <title>How to increase upload file size in ASP.NET Core</title>
      <link>https://nicolaiarocci.com/how-to-increase-upload-file-size-in-asp.net-core/</link>
      <pubDate>Fri, 26 Feb 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/how-to-increase-upload-file-size-in-asp.net-core/</guid>
      <description>Today I learned the hard way that since ASP.NET Core 2.0, the request body has acquired a default size limit at 30MB (~28.6 MiB).
 If the request body size exceeds the configured max request body size limit, the call to Request.Body.ReadAsync will throw an IOException. If this exception is uncaught, Kestrel will respond with a 413 Payload Too Large response and HttpSys will respond with a generic 500 Internal Server Error response (source).</description>
    </item>
    
  </channel>
</rss>