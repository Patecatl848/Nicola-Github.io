<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/dotnet/</link>
    <description>Recent content in dotnet on Nicola Iarocci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Sun, 14 Nov 2021 07:05:25 +0100</lastBuildDate>
    
	<atom:link href="https://nicolaiarocci.com/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My ASP.NET migration from .NET 5 to .NET 6</title>
      <link>https://nicolaiarocci.com/my-asp.net-migration-from-.net-5-to-.net-6/</link>
      <pubDate>Sun, 14 Nov 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/my-asp.net-migration-from-.net-5-to-.net-6/</guid>
      <description>I spent the last few days converting our WebApi REST API services, MVC web applications and Blazor server apps from .NET 5 to the recently released .NET 6. Overall the process was pretty straightforward. The few issues I went through were easy to solve and well documented. Things got more involved with the EF Core 6 transition, especially with the Npgsql Entity Framework Core Provider.
The official ASP.NET Core 5.</description>
    </item>
    
    <item>
      <title>Drama going on at the .NET Foundation</title>
      <link>https://nicolaiarocci.com/drama-going-on-at-the-.net-foundation/</link>
      <pubDate>Thu, 07 Oct 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/drama-going-on-at-the-.net-foundation/</guid>
      <description>A few months after I released my first .NET open source project (a niche one targeting the Italian fintech world), I was contacted by a representative of Team Digitale, the digital innovation branch of the Italian Public Administration. He suggested joining the Developers Italia initiative and moving my project to the their organization on GitHub &amp;ldquo;to enjoy enhanced visibility and broaden the audience&amp;rdquo;. I politely refused. I did not doubt my counterpart&amp;rsquo;s good faith.</description>
    </item>
    
    <item>
      <title>ASP.NET 6 Migration Cheatsheet and FAQ</title>
      <link>https://nicolaiarocci.com/asp.net-6-migration-cheatsheet-and-faq/</link>
      <pubDate>Thu, 23 Sep 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/asp.net-6-migration-cheatsheet-and-faq/</guid>
      <description>David Fowler has a very informative gist up on GitHub. It&amp;rsquo;s titled Migration to ASP.NET Core. NET6 and it&amp;rsquo;s filled with details, recipes and FAQs on migrating an ASP.NET Core 5 web app to ASP.NET Core 61. The focus is on the new, streamlined hosting model, also known as Minimal APIs2. To be clear, You don&amp;rsquo;t have to move to the new model. As the FAQ section emphasizes:
 Do I have to migrate to the new hosting model</description>
    </item>
    
    <item>
      <title>Performance improvements in .NET6</title>
      <link>https://nicolaiarocci.com/performance-improvements-in-.net6/</link>
      <pubDate>Fri, 03 Sep 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/performance-improvements-in-.net6/</guid>
      <description>I&amp;rsquo;m pretty psyched about the upcoming .NET6 release. I&amp;rsquo;ve already touched on ASP.NET 6 Minimal APIs. Continuing on the long-established tradition, the team has also worked hard on the performance side of things. File IO, for example, is seeing impressive gains:
 For .NET 6, we have made FileStream much faster and more reliable, thanks to an almost entire re-write. For same cases, the async implementation is now a few times faster!</description>
    </item>
    
    <item>
      <title>How to read Windows-1252 encoded files with .NETCore and .NET5&#43;</title>
      <link>https://nicolaiarocci.com/how-to-read-windows-1252-encoded-files-with-.netcore-and-.net5-/</link>
      <pubDate>Fri, 27 Aug 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/how-to-read-windows-1252-encoded-files-with-.netcore-and-.net5-/</guid>
      <description>Another day, another lesson learned: modern .NET does not support the Windows-1252 encoding out of the box. Today my colleague was happily porting a legacy NET4+ app to NET6. As usual, the port was super-easy; it would compile and run just fine, so he was surprised when the app crashed reading a few specific XML files. That&amp;rsquo;s when I was called in. A closer inspection revealed a pattern: all those crashing files were Windows 1252-encoded (the rest, a vast majority, were UTF-8.</description>
    </item>
    
    <item>
      <title>Will .NET 6 Minimal APIs turn heads?</title>
      <link>https://nicolaiarocci.com/will-.net-6-minimal-apis-turn-heads/</link>
      <pubDate>Wed, 14 Jul 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/will-.net-6-minimal-apis-turn-heads/</guid>
      <description>I am pretty excited about the Minimal APIs feature that is coming with .NET 6. Three lines of code will be enough to build a fully functional REST microservice1:
var app = WebApplication.Create(args); app.MapGet(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;quot;Hello World!&amp;quot;); await app.RunAsync();  If you&amp;rsquo;re a seasoned ASP.NET MVC/WebApi developer, the snippet caught your attention because, pre-.NET 6, achieving the same result will have you messing with a lot of extra cruft2. I suspect, however, that this feature is not primarily targeted at existing .</description>
    </item>
    
    <item>
      <title>My DotNetPodcast interview</title>
      <link>https://nicolaiarocci.com/my-dotnetpodcast-interview/</link>
      <pubDate>Tue, 06 Jul 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/my-dotnetpodcast-interview/</guid>
      <description>Today I was interviewed by Mauro Servienti on the DotNetPodcast. The theme was my experience as an open-source maintainer on both the Python and C# stacks. We also discussed the ongoing evolution of the dotNET ecosystem, touching on a few tangent topics.
The recording is in Italian and is available below here.
Listen to &amp;ldquo;Python, Eve, open source e fattura elettronica. Con Nicola Iarocci&amp;rdquo; on Spreaker.
Subscribe to the newsletter, the RSS feed, or follow @nicolaiarocci on Twitter</description>
    </item>
    
    <item>
      <title>Custom default values for not existing dictionary items (and a lesson learned)</title>
      <link>https://nicolaiarocci.com/custom-default-values-for-not-existing-dictionary-items-and-a-lesson-learned/</link>
      <pubDate>Fri, 11 Jun 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/custom-default-values-for-not-existing-dictionary-items-and-a-lesson-learned/</guid>
      <description>When dealing with dictionaries, a typical problem is when an operation attempts to retrieve an element using a key that does not exist in the dictionary. In .NET, a KeyNotFoundException is raised, and that&amp;rsquo;s the desired behaviour in most circumstances. Sometimes, however, you know that your program will frequently try to retrieve keys that do not exist. In such cases, it is more efficient to use the TryGetValue method:
 This method returns the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter is returned (source)</description>
    </item>
    
    <item>
      <title>dotnet SmtpClient should not be used</title>
      <link>https://nicolaiarocci.com/dotnet-smtpclient-should-not-be-used/</link>
      <pubDate>Tue, 04 May 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/dotnet-smtpclient-should-not-be-used/</guid>
      <description>I am very late to the party, but today I learned that the good old dotnet SmptClient is considered obsolete and should not be used. Quoting the documentation:
 We don&amp;rsquo;t recommend using the SmtpClient class for new development because SmtpClient doesn&amp;rsquo;t support many modern protocols. Use MailKit or other libraries instead. (source)
 Interestingly, Microsoft is recommending a third-party open-source library as an alternative. I hope we&amp;rsquo;ll see more of that in the future.</description>
    </item>
    
  </channel>
</rss>