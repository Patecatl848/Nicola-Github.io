<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/programming/</link>
    <description>Recent content in programming on Nicola Iarocci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Mon, 05 Apr 2021 07:05:25 +0100</lastBuildDate>
    
	<atom:link href="https://nicolaiarocci.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>School assignments that count: simulating the COVID outbreak with the C language</title>
      <link>https://nicolaiarocci.com/school-assignments-that-count-simulating-the-covid-outbreak-with-the-c-language/</link>
      <pubDate>Mon, 05 Apr 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/school-assignments-that-count-simulating-the-covid-outbreak-with-the-c-language/</guid>
      <description>Giulia got an exciting assignment from her teacher:
 Write a C program that simulates (a simplified version of) COVID outbreak spreading across a population of 200 people. When a healthy person comes into contact with a sick person, the healthy person becomes ill, too. After some time, a sick person will recover. A recovered person cannot infect a healthy person nor become sick again after coming in contact with a sick person.</description>
    </item>
    
    <item>
      <title>Get better at programming by learning how things work</title>
      <link>https://nicolaiarocci.com/get-better-at-programming-by-learning-how-things-work/</link>
      <pubDate>Sat, 27 Mar 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/get-better-at-programming-by-learning-how-things-work/</guid>
      <description>When we talk about getting better at programming, we often talk about testing, writing reusable code, design patterns, and readability. All of those things are important. But in this blog post, I want to talk about a different way to get better at programming: learning how the systems you’re using work! This is the main way I approach getting better at programming.
 Once again, Julia Evans has great sensible advice up on her site.</description>
    </item>
    
    <item>
      <title>Write libraries, not services? Not so fast</title>
      <link>https://nicolaiarocci.com/write-libraries-not-services-not-so-fast/</link>
      <pubDate>Thu, 25 Mar 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/write-libraries-not-services-not-so-fast/</guid>
      <description>Write libraries instead of services is an interesting article I read a while ago. I cannot get it off my head. In an attempt to clear up my mind, I decided to sit down and write about it. I have been writing libraries for a good part of my life. Most of my earlier dev-work resides on thousands of computers in the form of libraries. More recently, I have been writing and deploying remote services.</description>
    </item>
    
    <item>
      <title>Semantic Versioning Will Not Save You</title>
      <link>https://nicolaiarocci.com/semantic-versioning-will-not-save-you/</link>
      <pubDate>Thu, 04 Mar 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/semantic-versioning-will-not-save-you/</guid>
      <description>The always brilliant Hynek recently posted Semantic Versioning Will Not Save You. Primarily targeted at consumers of SemVer-versioned packages, it is full of insightful advice.
From my perspective as an open-source maintainer, I can tell you that versioning is hard. Judging when a new release is going to break backward compatibility is not as simple as it might seem on the surface, and Hynek does a great job explaining why. Sometimes it is also hard for me to tell if a change in a codebase classifies as a new feature, small improvement, or fix—subtle differences.</description>
    </item>
    
    <item>
      <title>Reverse engineering an obfuscated codebase and fixing it in the process</title>
      <link>https://nicolaiarocci.com/reverse-engineering-an-obfuscated-codebase-and-fixing-it-in-the-process/</link>
      <pubDate>Tue, 02 Mar 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/reverse-engineering-an-obfuscated-codebase-and-fixing-it-in-the-process/</guid>
      <description>Today&amp;rsquo;s mandatory reading is How I cut GTA Online loading times by 70%.
As someone who&amp;rsquo;s been fighting the protection/obfuscation cat &amp;amp; mouse game for twenty+ years, let me tell you one thing. The way this guy reverse-engineered parts of the GTA5 codebase and then proceeded to single-handly triage and fix a long-standing (7+ years) performance issue is simply mindblowing. All he had to work with were heavily obfuscated dlls. This also shows how we, the protectors, are always playing a losing game.</description>
    </item>
    
    <item>
      <title>Musings on Python&#39;s Pattern Matching</title>
      <link>https://nicolaiarocci.com/musings-on-pythons-pattern-matching/</link>
      <pubDate>Tue, 23 Feb 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/musings-on-pythons-pattern-matching/</guid>
      <description>Pattern Matching is coming to Python, and I am not sure I like it. Don&amp;rsquo;t get me wrong, I love pattern matching. I use it all the time in F#. I am sure that once it lands in the language, it will be wildly adopted.
So what&amp;rsquo;s the problem with Python&amp;rsquo;s pattern matching? The community, some core developers included, has expressed several concerns. The Python Steering Council has acknowledged them and is willing to look into improvements should they be proposed.</description>
    </item>
    
    <item>
      <title>What I listen to while programming</title>
      <link>https://nicolaiarocci.com/what-i-listen-to-while-programming/</link>
      <pubDate>Fri, 12 Feb 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/what-i-listen-to-while-programming/</guid>
      <description>What music do you listen to while programming?1 For me, it&amp;rsquo;s usually jazz, classical, electronic, lots of it, or nothing. There are some specialized websites and podcasts I sometimes recur to, like Music for Programming. Several Spotify playlists I dig a lot, Every Day I&amp;rsquo;m Nerdin&amp;rsquo; being one of them. What can I say? I am musically omnivore.
However, I recently discovered something different: the Field Recordings podcast. &amp;ldquo;A podcast where audio-makers stand silently in fields (or things that could be broadly interpreted as fields).</description>
    </item>
    
    <item>
      <title>When Homebrew breaks your Python virtual environment</title>
      <link>https://nicolaiarocci.com/when-homebrew-breaks-your-python-virtual-environment/</link>
      <pubDate>Mon, 08 Feb 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/when-homebrew-breaks-your-python-virtual-environment/</guid>
      <description>Ever had your old, trusty Python virtual environment fail on you? I sure did. Sometimes, when I activate or switch between virtual environments, I get the following error:
$ workon eve dyld: Library not loaded: @executable_path/../.Python  I never really took the time to look into it. When this happens, because I am in a rush (and because I am a lazy old fart), I shrug it off, recreate the virtual environment on the spot, and get back to work.</description>
    </item>
    
    <item>
      <title>Strong opinions on software development</title>
      <link>https://nicolaiarocci.com/strong-opinions-on-software-development/</link>
      <pubDate>Wed, 03 Feb 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/strong-opinions-on-software-development/</guid>
      <description>After six years in the field, Chris has shared his strong opinions on software development practices, languages, and methodologies. I like his attitude. Willingness to continuously put one&amp;rsquo;s personal views under scrutiny, eventually adapting or even changing them as needed, is not a common trait. Not in our field. While I generally agree with most of his opinions, I feel the urge to comment on a few of them.
 Typed languages are better when you&amp;rsquo;re working on a team of people with various experience levels</description>
    </item>
    
    <item>
      <title>The unreasonable effectiveness of simple HTML</title>
      <link>https://nicolaiarocci.com/the-unreasonable-effectiveness-of-simple-html/</link>
      <pubDate>Thu, 28 Jan 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/the-unreasonable-effectiveness-of-simple-html/</guid>
      <description>We&amp;rsquo;ve seen other articles pointing the finger at unnecessarily bloated websites. Terence Eden&amp;rsquo;s On the unreasonable effectiveness of simple HTML deserves mention, I think, for two reasons. First, the delivery is incredibly effective. Second, it is effective because of the storytelling.
By enveloping the message into an original short, touching story, he achieves two goals. First, he captures the reader&amp;rsquo;s attention; second, he makes the experience memorable. Please, go and read it; I&amp;rsquo;ll wait here.</description>
    </item>
    
    <item>
      <title>On the short, tormented life of Phil Katz</title>
      <link>https://nicolaiarocci.com/on-the-short-tormented-life-of-phil-katz/</link>
      <pubDate>Fri, 22 Jan 2021 07:05:25 +0100</pubDate>
      
      <guid>https://nicolaiarocci.com/on-the-short-tormented-life-of-phil-katz/</guid>
      <description>Bless the Internet Archive and its Wayback Machine. With it, we can go back in time and read The short, tormented life of computer genius Phil Katz, an unusually detailed and accurate article published in the April 14, 2000 issue of the Milwaukee Journal Sentinel.
 When he was found dead April 14, Phil Katz was slumped against a nightstand in a south side hotel, cradling an empty bottle of peppermint schnapps.</description>
    </item>
    
    <item>
      <title>The Obligation of The Programmer</title>
      <link>https://nicolaiarocci.com/obligation-programmer/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/obligation-programmer/</guid>
      <description>Robert C.Martin, of Clean Code fame, has something to say on the role of we programmers in today&amp;#8217;s society.
 We rule the world.
We don&amp;#8217;t quite understand this yet. More importantly, the world doesn&amp;#8217;t quite understand it yet. Our civilization doesn&amp;#8217;t quite realize how dependent it has become on software &amp;#8212; on us.
 He goes as far as suggesting a programmer&amp;#8217;s code of conduct of sorts. Food for thought I guess, although I suspect we&amp;#8217;re too much of a wild and scattered bunch for something like that to really stick.</description>
    </item>
    
    <item>
      <title>Why Don’t More People Work As Programmers?</title>
      <link>https://nicolaiarocci.com/dont-people-work-programmers/</link>
      <pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/dont-people-work-programmers/</guid>
      <description>This originally appeared on Quora and is well worth reading.
 Becoming a good programmer is incredibly difficult and it doesn’t happen quickly. We can’t expect to plant some trees and have 2000-year-old redwoods grow overnight, regardless of the demand for them.
 via Why Don&amp;rsquo;t More People Work As Programmers? &amp;#8211; Forbes.</description>
    </item>
    
    <item>
      <title>How to be a sane programmer</title>
      <link>https://nicolaiarocci.com/how-to-be-a-sane-programmer/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/how-to-be-a-sane-programmer/</guid>
      <description>But here’s the rub. Programming, like writing, painting, and music, is chiefly a creative endeavor not a technical one. Practice with any technology or language is useful as a means of learning tools and techniques, but it will not make you a substantially better programmer.
 via How to be a sane programmer</description>
    </item>
    
    <item>
      <title>Why Good Programming Projects Go Bad</title>
      <link>https://nicolaiarocci.com/why-good-programming-projects-go-bad/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/why-good-programming-projects-go-bad/</guid>
      <description>Fred Brooks wrote the software development classic The Mythical Man-Month almost 40 years ago. In this interview, Brooks explains why managers still make the same mistakes.
 via Why Good Programming Projects Go Bad.</description>
    </item>
    
    <item>
      <title>The Future of Programming</title>
      <link>https://nicolaiarocci.com/the-future-of-programming/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/the-future-of-programming/</guid>
      <description>Bret Victor on Vimeo.</description>
    </item>
    
  </channel>
</rss>